// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios11.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MatiSDK
import AVFoundation
import CommonCrypto
import CoreTelephony
import Dispatch
import Foundation
import ImageIO
@_exported import MatiSDK
import MobileCoreServices
import Network
import SafariServices
import Swift
import UIKit
import zlib
@objc public protocol MatiButtonResultDelegate {
  @objc func verificationSuccess(identityId: Swift.String)
  @objc func verificationCancelled()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MatiButtonResult : ObjectiveC.NSObject {
  @objc weak public var delegate: MatiSDK.MatiButtonResultDelegate?
  @objc public static let shared: MatiSDK.MatiButtonResult
  @objc deinit
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(MatiSDK.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: MatiSDK.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: MatiSDK.FramerEventClient)
  func createWriteFrame(opcode: MatiSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : MatiSDK.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: MatiSDK.FramerEventClient)
  public func createWriteFrame(opcode: MatiSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension UInt8 : MatiSDK.MyWSArrayType {
}
extension Array where Element : MatiSDK.MyWSArrayType, Element : Swift.UnsignedInteger {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
  public typealias Element = MatiSDK.SocketIOClientOption
  public typealias Index = Swift.Array<MatiSDK.SocketIOClientOption>.Index
  public typealias Iterator = Swift.Array<MatiSDK.SocketIOClientOption>.Iterator
  public typealias SubSequence = Swift.Array<MatiSDK.SocketIOClientOption>.SubSequence
  public var startIndex: MatiSDK.SocketIOClientConfiguration.Index {
    get
  }
  public var endIndex: MatiSDK.SocketIOClientConfiguration.Index {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: MatiSDK.SocketIOClientConfiguration.Index.Stride {
    get
  }
  public var first: MatiSDK.SocketIOClientConfiguration.Element? {
    get
  }
  public subscript(position: MatiSDK.SocketIOClientConfiguration.Index) -> MatiSDK.SocketIOClientConfiguration.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<MatiSDK.SocketIOClientConfiguration.Index>) -> MatiSDK.SocketIOClientConfiguration.SubSequence {
    get
    set
  }
  public init(arrayLiteral elements: MatiSDK.SocketIOClientConfiguration.Element...)
  public func makeIterator() -> MatiSDK.SocketIOClientConfiguration.Iterator
  public func index(after i: MatiSDK.SocketIOClientConfiguration.Index) -> MatiSDK.SocketIOClientConfiguration.Index
  public mutating func insert(_ element: MatiSDK.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
  public typealias ArrayLiteralElement = MatiSDK.SocketIOClientConfiguration.Element
  public typealias Indices = Swift.DefaultIndices<MatiSDK.SocketIOClientConfiguration>
}
public protocol ConfigSettable {
  mutating func setConfigs(_ config: MatiSDK.SocketIOClientConfiguration)
}
public class WSEngine : MatiSDK.Engine, MatiSDK.TransportEventClient, MatiSDK.FramerEventClient, MatiSDK.FrameCollectorDelegate, MatiSDK.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: MatiSDK.Transport, certPinner: MatiSDK.CertificatePinning? = nil, headerValidator: MatiSDK.HeaderValidator = FoundationSecurity(), httpHandler: MatiSDK.HTTPHandler = FoundationHTTPHandler(), framer: MatiSDK.Framer = WSFramer(), compressionHandler: MatiSDK.CompressionHandler? = nil)
  public func register(delegate: MatiSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: MatiSDK.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: MatiSDK.ConnectionState)
  public func didReceiveHTTP(event: MatiSDK.HTTPEvent)
  public func frameProcessed(event: MatiSDK.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: MatiSDK.FrameCollector.Event)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MatiButton : UIKit.UIButton {
  @objc public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc public func setParams(clientId: Swift.String, flowId: Swift.String?, metadata: [Swift.String : Any]? = nil)
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc final public class SocketAckEmitter : ObjectiveC.NSObject {
  @objc final public var rawEmitView: MatiSDK.SocketRawAckView {
    @objc get
  }
  final public var expected: Swift.Bool {
    get
  }
  public init(socket: MatiSDK.SocketIOClient, ackNum: Swift.Int)
  final public func with(_ items: MatiSDK.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class OnAckCallback : ObjectiveC.NSObject {
  @objc deinit
  @objc final public func timingOut(after seconds: Swift.Double, callback: @escaping MatiSDK.AckCallback)
  @objc override dynamic public init()
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: MatiSDK.ErrorType, b: MatiSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: MatiSDK.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: MatiSDK.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: MatiSDK.WebSocketEvent, client: MatiSDK.WebSocket)
}
open class WebSocket : MatiSDK.WebSocketClient, MatiSDK.EngineDelegate {
  weak public var delegate: MatiSDK.WebSocketDelegate?
  public var onEvent: ((MatiSDK.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: MatiSDK.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: MatiSDK.CertificatePinning? = FoundationSecurity(), compressionHandler: MatiSDK.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: MatiSDK.WebSocketEvent)
  @objc deinit
}
extension Data {
}
public protocol SocketManagerSpec : MatiSDK.SocketEngineClient {
  var defaultSocket: MatiSDK.SocketIOClient { get }
  var engine: MatiSDK.SocketEngineSpec? { get set }
  var forceNew: Swift.Bool { get set }
  var handleQueue: Dispatch.DispatchQueue { get set }
  var nsps: [Swift.String : MatiSDK.SocketIOClient] { get set }
  var reconnects: Swift.Bool { get set }
  var reconnectWait: Swift.Int { get set }
  var reconnectWaitMax: Swift.Int { get set }
  var randomizationFactor: Swift.Double { get set }
  var socketURL: Foundation.URL { get }
  var status: MatiSDK.SocketIOStatus { get }
  var version: MatiSDK.SocketIOVersion { get }
  func connect()
  func connectSocket(_ socket: MatiSDK.SocketIOClient, withPayload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func disconnect()
  func disconnectSocket(_ socket: MatiSDK.SocketIOClient)
  func disconnectSocket(forNamespace nsp: Swift.String)
  func emitAll(_ event: Swift.String, _ items: MatiSDK.SocketData...)
  func reconnect()
  @discardableResult
  func removeSocket(_ socket: MatiSDK.SocketIOClient) -> MatiSDK.SocketIOClient?
  func socket(forNamespace nsp: Swift.String) -> MatiSDK.SocketIOClient
}
public enum SocketAckStatus : Swift.String {
  case noAck
  public static func == (lhs: Swift.String, rhs: MatiSDK.SocketAckStatus) -> Swift.Bool
  public static func == (lhs: MatiSDK.SocketAckStatus, rhs: Swift.String) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class StringHTTPHandler : MatiSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: MatiSDK.HTTPHandlerDelegate)
  @objc deinit
}
public struct SocketEventHandler {
  public let event: Swift.String
  public let id: Foundation.UUID
  public let callback: MatiSDK.NormalCallback
  public func executeCallback(with items: [Any], withAck ack: Swift.Int, withSocket socket: MatiSDK.SocketIOClient)
}
public class FoundationHTTPHandler : MatiSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: MatiSDK.HTTPHandlerDelegate)
  @objc deinit
}
public protocol SocketEngineWebsocket : MatiSDK.SocketEngineSpec {
  var wsConnected: Swift.Bool { get }
  func sendWebSocketMessage(_ str: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
}
extension SocketEngineWebsocket {
  public func sendWebSocketMessage(_ str: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: MatiSDK.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: MatiSDK.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: MatiSDK.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : MatiSDK.HTTPServerHandler {
  public func register(delegate: MatiSDK.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
public protocol SocketEngineSpec : AnyObject {
  var client: MatiSDK.SocketEngineClient? { get set }
  var closed: Swift.Bool { get }
  var compress: Swift.Bool { get }
  var connected: Swift.Bool { get }
  var connectParams: [Swift.String : Any]? { get set }
  var cookies: [Foundation.HTTPCookie]? { get }
  var engineQueue: Dispatch.DispatchQueue { get }
  var extraHeaders: [Swift.String : Swift.String]? { get set }
  var fastUpgrade: Swift.Bool { get }
  var forcePolling: Swift.Bool { get }
  var forceWebsockets: Swift.Bool { get }
  var polling: Swift.Bool { get }
  var probing: Swift.Bool { get }
  var sid: Swift.String { get }
  var socketPath: Swift.String { get }
  var urlPolling: Foundation.URL { get }
  var urlWebSocket: Foundation.URL { get }
  var version: MatiSDK.SocketIOVersion { get }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  var websocket: Swift.Bool { get }
  var ws: MatiSDK.WebSocket? { get }
  init(client: MatiSDK.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  func connect()
  func didError(reason: Swift.String)
  func disconnect(reason: Swift.String)
  func doFastUpgrade()
  func flushWaitingForPostToWebSocket()
  func parseEngineData(_ data: Foundation.Data)
  func parseEngineMessage(_ message: Swift.String)
  func write(_ msg: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
@objc public enum SocketIOStatus : Swift.Int, Swift.CustomStringConvertible {
  case notConnected
  case disconnected
  case connecting
  case connected
  public var active: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func engineDidReceivePing()
  @objc func engineDidReceivePong()
  @objc func engineDidSendPing()
  @objc func engineDidSendPong()
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
  @objc func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: MatiSDK.FoundationSecurityError, b: MatiSDK.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension FoundationSecurity : MatiSDK.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((MatiSDK.PinningState) -> ()))
}
extension FoundationSecurity : MatiSDK.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
extension SocketLogger {
  public func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  public func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
public class WSCompression : MatiSDK.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawView : ObjectiveC.NSObject {
  final public func emit(_ event: Swift.String, _ items: MatiSDK.SocketData...)
  @objc final public func emit(_ event: Swift.String, with items: [Any])
  final public func emitWithAck(_ event: Swift.String, _ items: MatiSDK.SocketData...) -> MatiSDK.OnAckCallback
  @objc final public func emitWithAck(_ event: Swift.String, with items: [Any]) -> MatiSDK.OnAckCallback
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawAckView : ObjectiveC.NSObject {
  final public func with(_ items: MatiSDK.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc override dynamic public init()
  @objc deinit
}
public protocol SocketEnginePollable : MatiSDK.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [MatiSDK.Post] { get set }
  var session: Foundation.URLSession? { get }
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  func sendPollMessage(_ message: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  func stopPolling()
}
extension SocketEnginePollable {
  public func doPoll()
  public func sendPollMessage(_ message: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())? = nil)
  public func stopPolling()
}
@objc open class SocketEngine : ObjectiveC.NSObject, MatiSDK.WebSocketDelegate, Foundation.URLSessionDelegate, MatiSDK.SocketEnginePollable, MatiSDK.SocketEngineWebsocket, MatiSDK.ConfigSettable {
  final public let engineQueue: Dispatch.DispatchQueue
  public var connectParams: [Swift.String : Any]? {
    get
    set
  }
  public var extraHeaders: [Swift.String : Swift.String]?
  public var postWait: [MatiSDK.Post]
  public var waitingForPoll: Swift.Bool
  public var waitingForPost: Swift.Bool
  public var closed: Swift.Bool {
    get
  }
  public var compress: Swift.Bool {
    get
  }
  public var connected: Swift.Bool {
    get
  }
  public var cookies: [Foundation.HTTPCookie]? {
    get
  }
  public var fastUpgrade: Swift.Bool {
    get
  }
  public var forcePolling: Swift.Bool {
    get
  }
  public var forceWebsockets: Swift.Bool {
    get
  }
  public var invalidated: Swift.Bool {
    get
  }
  public var polling: Swift.Bool {
    get
  }
  public var probing: Swift.Bool {
    get
  }
  public var session: Foundation.URLSession? {
    get
  }
  public var sid: Swift.String {
    get
  }
  public var socketPath: Swift.String {
    get
  }
  public var urlPolling: Foundation.URL {
    get
  }
  public var urlWebSocket: Foundation.URL {
    get
  }
  public var version: MatiSDK.SocketIOVersion {
    get
  }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  public var websocket: Swift.Bool {
    get
  }
  public var enableSOCKSProxy: Swift.Bool {
    get
  }
  public var ws: MatiSDK.WebSocket? {
    get
  }
  public var wsConnected: Swift.Bool {
    get
  }
  weak public var client: MatiSDK.SocketEngineClient?
  public init(client: MatiSDK.SocketEngineClient, url: Foundation.URL, config: MatiSDK.SocketIOClientConfiguration)
  required convenience public init(client: MatiSDK.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func didError(reason: Swift.String)
  open func disconnect(reason: Swift.String)
  open func doFastUpgrade()
  open func flushWaitingForPostToWebSocket()
  open func parseEngineData(_ data: Foundation.Data)
  open func parseEngineMessage(_ message: Swift.String)
  open func setConfigs(_ config: MatiSDK.SocketIOClientConfiguration)
  open func write(_ msg: Swift.String, withType type: MatiSDK.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())? = nil)
  @objc override dynamic public init()
}
extension SocketEngine {
  public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
}
extension SocketEngine {
  public func didReceive(event: MatiSDK.WebSocketEvent, client _: MatiSDK.WebSocket)
}
public enum SocketIOVersion : Swift.Int {
  case two
  case three
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SocketIOClientOption {
  case compress
  case connectParams([Swift.String : Any])
  case cookies([Foundation.HTTPCookie])
  case extraHeaders([Swift.String : Swift.String])
  case forceNew(Swift.Bool)
  case forcePolling(Swift.Bool)
  case forceWebsockets(Swift.Bool)
  case enableSOCKSProxy(Swift.Bool)
  case handleQueue(Dispatch.DispatchQueue)
  case log(Swift.Bool)
  case logger(MatiSDK.SocketLogger)
  case path(Swift.String)
  case reconnects(Swift.Bool)
  case reconnectAttempts(Swift.Int)
  case reconnectWait(Swift.Int)
  case reconnectWaitMax(Swift.Int)
  case randomizationFactor(Swift.Double)
  case secure(Swift.Bool)
  case security(MatiSDK.CertificatePinning)
  case selfSigned(Swift.Bool)
  case sessionDelegate(Foundation.URLSessionDelegate)
  case version(MatiSDK.SocketIOVersion)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: MatiSDK.SocketIOClientOption, rhs: MatiSDK.SocketIOClientOption) -> Swift.Bool
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: MatiSDK.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: MatiSDK.Frame)
  @objc deinit
}
extension UIImageView {
  public func loadGif(name: Swift.String)
}
extension UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
}
public struct SocketPacket : Swift.CustomStringConvertible {
  public let nsp: Swift.String
  public let id: Swift.Int
  public let type: MatiSDK.SocketPacket.PacketType
  public var binary: [Foundation.Data] {
    get
  }
  public var data: [Any] {
    get
  }
  public var args: [Any] {
    get
  }
  public var description: Swift.String {
    get
  }
  public var event: Swift.String {
    get
  }
  public var packetString: Swift.String {
    get
  }
}
extension SocketPacket {
  public enum PacketType : Swift.Int {
    case connect
    case disconnect
    case event
    case ack
    case error
    case binaryEvent
    case binaryAck
    public var isBinary: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc open class SocketManager : ObjectiveC.NSObject, MatiSDK.SocketManagerSpec, MatiSDK.SocketParsable, MatiSDK.SocketDataBufferable, MatiSDK.ConfigSettable {
  public var defaultSocket: MatiSDK.SocketIOClient {
    get
  }
  final public let socketURL: Foundation.URL
  public var config: MatiSDK.SocketIOClientConfiguration {
    get
    set
  }
  public var engine: MatiSDK.SocketEngineSpec?
  public var forceNew: Swift.Bool
  public var handleQueue: Dispatch.DispatchQueue
  public var nsps: [Swift.String : MatiSDK.SocketIOClient]
  public var reconnects: Swift.Bool
  public var reconnectWait: Swift.Int
  public var reconnectWaitMax: Swift.Int
  public var randomizationFactor: Swift.Double
  public var status: MatiSDK.SocketIOStatus {
    get
  }
  public var version: MatiSDK.SocketIOVersion {
    get
  }
  public var waitingPackets: [MatiSDK.SocketPacket]
  public init(socketURL: Foundation.URL, config: MatiSDK.SocketIOClientConfiguration = [])
  @objc convenience public init(socketURL: Foundation.URL, config: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func connectSocket(_ socket: MatiSDK.SocketIOClient, withPayload payload: [Swift.String : Any]? = nil)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func disconnectSocket(_ socket: MatiSDK.SocketIOClient)
  open func disconnectSocket(forNamespace nsp: Swift.String)
  open func emitAll(clientEvent event: MatiSDK.SocketClientEvent, data: [Any])
  open func emitAll(_ event: Swift.String, _ items: MatiSDK.SocketData...)
  @objc open func engineDidClose(reason: Swift.String)
  @objc open func engineDidError(reason: Swift.String)
  @objc open func engineDidOpen(reason: Swift.String)
  @objc open func engineDidReceivePing()
  @objc open func engineDidSendPing()
  @objc open func engineDidReceivePong()
  @objc open func engineDidSendPong()
  @objc open func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
  @objc open func parseEngineMessage(_ msg: Swift.String)
  @objc open func parseEngineBinaryData(_ data: Foundation.Data)
  open func reconnect()
  @discardableResult
  open func removeSocket(_ socket: MatiSDK.SocketIOClient) -> MatiSDK.SocketIOClient?
  open func setConfigs(_ config: MatiSDK.SocketIOClientConfiguration)
  open func socket(forNamespace nsp: Swift.String) -> MatiSDK.SocketIOClient
  @objc override dynamic public init()
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: MatiSDK.FoundationTransportError, b: MatiSDK.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, MatiSDK.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: MatiSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: MatiSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
  @objc override dynamic public init()
}
@objc public enum SocketEnginePacketType : Swift.Int {
  case open
  case close
  case ping
  case pong
  case message
  case upgrade
  case noop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: MatiSDK.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: MatiSDK.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: MatiSDK.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: MatiSDK.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> MatiSDK.URLParts?
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: MatiSDK.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: MatiSDK.ServerEvent)
}
public enum ServerEvent {
  case connected(MatiSDK.Connection, [Swift.String : Swift.String])
  case disconnected(MatiSDK.Connection, Swift.String, Swift.UInt16)
  case text(MatiSDK.Connection, Swift.String)
  case binary(MatiSDK.Connection, Foundation.Data)
  case pong(MatiSDK.Connection, Foundation.Data?)
  case ping(MatiSDK.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : MatiSDK.Server, MatiSDK.ConnectionDelegate {
  public var onEvent: ((MatiSDK.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: MatiSDK.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : MatiSDK.Connection, MatiSDK.HTTPServerDelegate, MatiSDK.FramerEventClient, MatiSDK.FrameCollectorDelegate, MatiSDK.TransportEventClient {
  public var onEvent: ((MatiSDK.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: MatiSDK.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: MatiSDK.FrameOpCode)
  public func connectionChanged(state: MatiSDK.ConnectionState)
  public func didReceive(event: MatiSDK.HTTPEvent)
  public func frameProcessed(event: MatiSDK.FrameEvent)
  public func didForm(event: MatiSDK.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
@objc open class SocketIOClient : ObjectiveC.NSObject, MatiSDK.SocketIOClientSpec {
  final public let nsp: Swift.String
  public var anyHandler: ((MatiSDK.SocketAnyEvent) -> ())? {
    get
  }
  public var handlers: [MatiSDK.SocketEventHandler] {
    get
  }
  weak public var manager: MatiSDK.SocketManagerSpec? {
    get
  }
  public var rawEmitView: MatiSDK.SocketRawView {
    get
  }
  public var status: MatiSDK.SocketIOStatus {
    get
  }
  public var sid: Swift.String? {
    get
  }
  public init(manager: MatiSDK.SocketManagerSpec, nsp: Swift.String)
  @objc deinit
  open func connect(withPayload payload: [Swift.String : Any]? = nil)
  open func connect(withPayload payload: [Swift.String : Any]? = nil, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  open func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func emit(_ event: Swift.String, _ items: MatiSDK.SocketData..., completion: (() -> ())? = nil)
  open func emit(_ event: Swift.String, with items: [MatiSDK.SocketData], completion: (() -> ())?)
  open func emitWithAck(_ event: Swift.String, _ items: MatiSDK.SocketData...) -> MatiSDK.OnAckCallback
  open func emitWithAck(_ event: Swift.String, with items: [MatiSDK.SocketData]) -> MatiSDK.OnAckCallback
  open func emitAck(_ ack: Swift.Int, with items: [Any])
  open func handleAck(_ ack: Swift.Int, data: [Any])
  open func handleClientEvent(_ event: MatiSDK.SocketClientEvent, data: [Any])
  open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
  open func handlePacket(_ packet: MatiSDK.SocketPacket)
  open func leaveNamespace()
  open func joinNamespace(withPayload payload: [Swift.String : Any]? = nil)
  open func off(clientEvent event: MatiSDK.SocketClientEvent)
  open func off(_ event: Swift.String)
  open func off(id: Foundation.UUID)
  @discardableResult
  open func on(_ event: Swift.String, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func on(clientEvent event: MatiSDK.SocketClientEvent, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(clientEvent event: MatiSDK.SocketClientEvent, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(_ event: Swift.String, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  open func onAny(_ handler: @escaping (MatiSDK.SocketAnyEvent) -> ())
  @available(*, unavailable, message: "Call the manager's reconnect method")
  open func reconnect()
  open func removeAllHandlers()
  open func setReconnecting(reason: Swift.String)
  @objc override dynamic public init()
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: MatiSDK.TCPTransportError, b: MatiSDK.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : MatiSDK.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: MatiSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: MatiSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, MatiSDK.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: MatiSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: MatiSDK.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
  @objc final public let event: Swift.String
  @objc final public let items: [Any]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: MatiSDK.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: MatiSDK.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: MatiSDK.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
public protocol SocketData {
  func socketRepresentation() throws -> MatiSDK.SocketData
}
extension SocketData {
  public func socketRepresentation() -> MatiSDK.SocketData
}
extension Array : MatiSDK.SocketData {
}
extension Bool : MatiSDK.SocketData {
}
extension Dictionary : MatiSDK.SocketData {
}
extension Double : MatiSDK.SocketData {
}
extension Int : MatiSDK.SocketData {
}
extension NSArray : MatiSDK.SocketData {
}
extension Data : MatiSDK.SocketData {
}
extension NSData : MatiSDK.SocketData {
}
extension NSDictionary : MatiSDK.SocketData {
}
extension NSString : MatiSDK.SocketData {
}
extension NSNull : MatiSDK.SocketData {
}
extension String : MatiSDK.SocketData {
}
public typealias AckCallback = ([Any]) -> ()
public typealias NormalCallback = ([Any], MatiSDK.SocketAckEmitter) -> ()
public typealias Post = (msg: Swift.String, completion: (() -> ())?)
public protocol SocketIOClientSpec : AnyObject {
  var anyHandler: ((MatiSDK.SocketAnyEvent) -> ())? { get }
  var handlers: [MatiSDK.SocketEventHandler] { get }
  var manager: MatiSDK.SocketManagerSpec? { get }
  var nsp: Swift.String { get }
  var rawEmitView: MatiSDK.SocketRawView { get }
  var sid: Swift.String? { get }
  var status: MatiSDK.SocketIOStatus { get }
  func connect(withPayload payload: [Swift.String : Any]?)
  func connect(withPayload payload: [Swift.String : Any]?, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func didError(reason: Swift.String)
  func disconnect()
  func emit(_ event: Swift.String, _ items: MatiSDK.SocketData..., completion: (() -> ())?)
  func emit(_ event: Swift.String, with items: [MatiSDK.SocketData], completion: (() -> ())?)
  func emitAck(_ ack: Swift.Int, with items: [Any])
  func emitWithAck(_ event: Swift.String, _ items: MatiSDK.SocketData...) -> MatiSDK.OnAckCallback
  func emitWithAck(_ event: Swift.String, with items: [MatiSDK.SocketData]) -> MatiSDK.OnAckCallback
  func handleAck(_ ack: Swift.Int, data: [Any])
  func handleClientEvent(_ event: MatiSDK.SocketClientEvent, data: [Any])
  func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int)
  func handlePacket(_ packet: MatiSDK.SocketPacket)
  func leaveNamespace()
  func joinNamespace(withPayload payload: [Swift.String : Any]?)
  func off(clientEvent event: MatiSDK.SocketClientEvent)
  func off(_ event: Swift.String)
  func off(id: Foundation.UUID)
  func on(_ event: Swift.String, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  func on(clientEvent event: MatiSDK.SocketClientEvent, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  func once(clientEvent event: MatiSDK.SocketClientEvent, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  func once(_ event: Swift.String, callback: @escaping MatiSDK.NormalCallback) -> Foundation.UUID
  func onAny(_ handler: @escaping (MatiSDK.SocketAnyEvent) -> ())
  func removeAllHandlers()
  func setReconnecting(reason: Swift.String)
}
extension SocketIOClientSpec {
  public func didError(reason: Swift.String)
}
public enum SocketClientEvent : Swift.String {
  case connect
  case disconnect
  case error
  case ping
  case pong
  case reconnect
  case reconnectAttempt
  case statusChange
  case websocketUpgrade
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SocketParsable : AnyObject {
  func parseBinaryData(_ data: Foundation.Data) -> MatiSDK.SocketPacket?
  func parseSocketMessage(_ message: Swift.String) -> MatiSDK.SocketPacket?
}
public enum SocketParsableError : Swift.Error {
  case invalidDataArray
  case invalidPacket
  case invalidPacketType
  public static func == (a: MatiSDK.SocketParsableError, b: MatiSDK.SocketParsableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SocketDataBufferable : AnyObject {
  var waitingPackets: [MatiSDK.SocketPacket] { get set }
}
extension SocketParsable where Self : MatiSDK.SocketDataBufferable, Self : MatiSDK.SocketManagerSpec {
  public func parseSocketMessage(_ message: Swift.String) -> MatiSDK.SocketPacket?
  public func parseBinaryData(_ data: Foundation.Data) -> MatiSDK.SocketPacket?
}
extension UIDevice {
  public static let modelName: Swift.String
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((MatiSDK.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
extension MatiSDK.CloseCode : Swift.Equatable {}
extension MatiSDK.CloseCode : Swift.Hashable {}
extension MatiSDK.CloseCode : Swift.RawRepresentable {}
extension MatiSDK.FrameOpCode : Swift.Equatable {}
extension MatiSDK.FrameOpCode : Swift.Hashable {}
extension MatiSDK.FrameOpCode : Swift.RawRepresentable {}
extension MatiSDK.ErrorType : Swift.Equatable {}
extension MatiSDK.ErrorType : Swift.Hashable {}
extension MatiSDK.SocketAckStatus : Swift.Equatable {}
extension MatiSDK.SocketAckStatus : Swift.Hashable {}
extension MatiSDK.SocketAckStatus : Swift.RawRepresentable {}
extension MatiSDK.SocketIOStatus : Swift.Equatable {}
extension MatiSDK.SocketIOStatus : Swift.Hashable {}
extension MatiSDK.SocketIOStatus : Swift.RawRepresentable {}
extension MatiSDK.FoundationSecurityError : Swift.Equatable {}
extension MatiSDK.FoundationSecurityError : Swift.Hashable {}
extension MatiSDK.SocketIOVersion : Swift.Equatable {}
extension MatiSDK.SocketIOVersion : Swift.Hashable {}
extension MatiSDK.SocketIOVersion : Swift.RawRepresentable {}
extension MatiSDK.SocketIOClientOption : Swift.Equatable {}
extension MatiSDK.SocketIOClientOption : Swift.CustomStringConvertible {}
extension MatiSDK.SocketPacket.PacketType : Swift.Equatable {}
extension MatiSDK.SocketPacket.PacketType : Swift.Hashable {}
extension MatiSDK.SocketPacket.PacketType : Swift.RawRepresentable {}
extension MatiSDK.FoundationTransportError : Swift.Equatable {}
extension MatiSDK.FoundationTransportError : Swift.Hashable {}
extension MatiSDK.SocketEnginePacketType : Swift.Equatable {}
extension MatiSDK.SocketEnginePacketType : Swift.Hashable {}
extension MatiSDK.SocketEnginePacketType : Swift.RawRepresentable {}
extension MatiSDK.TCPTransportError : Swift.Equatable {}
extension MatiSDK.TCPTransportError : Swift.Hashable {}
extension MatiSDK.SocketClientEvent : Swift.Equatable {}
extension MatiSDK.SocketClientEvent : Swift.Hashable {}
extension MatiSDK.SocketClientEvent : Swift.RawRepresentable {}
extension MatiSDK.SocketParsableError : Swift.Equatable {}
extension MatiSDK.SocketParsableError : Swift.Hashable {}
extension MatiSDK.SecurityErrorCode : Swift.Equatable {}
extension MatiSDK.SecurityErrorCode : Swift.Hashable {}
extension MatiSDK.SecurityErrorCode : Swift.RawRepresentable {}
